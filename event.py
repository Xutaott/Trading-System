from abc import ABCMeta


class Event(object):
    '''
    Event is base class providing an interface for all subsequent
    (inherited) events, that will trigger further events in the
    trading infrastructure.
    '''
    __metaclass__ = ABCMeta


class DataEvent(Event):
    '''
    Handles events of pushing data for strategy analysis
    '''

    def __init__(self, datetime, batch):
        '''
        :param datetime:df.datetime, the time of this batch generated
        :param batch: DataFrame, the df that stores all data needed for that
                date's strategy analysis
        '''
        self.type = "DataEvent"
        self.datetime = datetime
        self.batch = batch


class SignalEvent(Event):
    '''
    Handles the signal generated from strategy analysis
    '''

    def __init__(self, datetime, signal):
        '''
        :param datetime:df.datetime, the time of this signal generated
        :param signal:DataFrame, the dataframe that stores all signals
                for symbols
        '''
        self.type = "SignalEvent"
        self.datetime = datetime
        self.signal = signal


class OrderEvent(Event):
    '''
    Handles the oder generated by position rebalance
    '''

    def __init__(self, datetime, symbol, quantity, side, price_range,
                 order_type="Market"):
        '''
        :param datetime: df.datetime, the time of this order generated
        :param symbol: String
        :param quantity: Int
        :param side: String, "Buy" or "Sell"
        :param price_range: Tuple, suggested price range for this order.
                            (down,up)
        :param order_type: String, "Market", "Limit","StopLoss"
        '''
        self.type = "OrderEvent"
        self.datetime = datetime
        self.symbol = symbol
        self.quantity = quantity
        self.side = side
        self.price_range = price_range
        self.order_type = order_type


class FillEvent(Event):
    '''
    Handles the event once order is filled
    '''

    def __init__(self, datetime, symbol, quantity, price, side, fee):
        '''
        :param datetime: df.datetime, the time when order is filled
        :param symbol: String
        :param quantity: Int
        :param price: traded price
        :param side: String, "Buy" or "Sell"
        :param fee: Float, total cost to fill this order, including
                 spread, commission fee
        '''
        self.type = "FillEvent"
        self.datetime = datetime
        self.symbol = symbol
        self.quantity = quantity
        self.price = price
        self.side = side
        self.fee = fee


class ExecutedEvent(Event):
    '''
    After all order for this time is executed, ask for next batch of date
    '''

    def __init__(self, datetime):
        '''

        :param datetime: datetime, the time when all orders are executed
            in this period
        '''
        self.type = "ExecutedEvent"
        self.datetime = datetime
