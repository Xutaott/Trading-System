from abc import ABCMeta


class Event(object):
    '''
    Event is base class providing an interface for all subsequent
    (inherited) events, that will trigger further events in the
    trading infrastructure.
    '''
    __metaclass__ = ABCMeta


class SignalEvent(Event):
    '''
    Handles the signal generated from strategy analysis
    '''

    def __init__(self, didx, signal):
        '''
        :param didx: Int, the index of time when this signal is generated
        :param signal:Dict of dict, {String symbol:
                                    {"side": String, "last_close": float}}
        '''
        self.type = "SignalEvent"
        self.didx = didx
        self.signal = signal


class OrderEvent(Event):
    '''
    Handles the oder generated by position rebalance
    '''

    def __init__(self, didx, symbol, quantity, side, price_range,
                 order_type="Market"):
        '''
        :param didx: Int, the index of time when this order is generated
        :param symbol: String
        :param quantity: Int
        :param side: String, "Buy" or "Sell"
        :param price_range: Tuple, suggested price range for this order.
                            (down,up). TODO: Control the spread risk
        :param order_type: String, "Market", "Limit","StopLoss"
        '''
        self.type = "OrderEvent"
        self.didx = didx
        self.symbol = symbol
        self.quantity = quantity
        self.side = side
        self.price_range = price_range
        self.order_type = order_type


class FillEvent(Event):
    '''
    Handles the event once order is filled
    '''

    def __init__(self, didx, symbol, quantity, price, side, fee):
        '''
        :param didx: Int, the index of time when order is filled
        :param symbol: String
        :param quantity: Int
        :param price: traded price
        :param side: String, "Buy" or "Sell"
        :param fee: Float, total cost to fill this order, including
                 spread, commission fee
        '''
        self.type = "FillEvent"
        self.didx = didx
        self.symbol = symbol
        self.quantity = quantity
        self.price = price
        self.side = side
        self.fee = fee


class NotFillEvent(Event):
    '''
    Order is processed but not filled
    '''

    def __init__(self, didx):
        '''

        :param datetime: datetime
        '''
        self.type = "NotFillEvent"
        self.didx = didx


class NextLoopEvent(Event):
    '''
    After all orders for this time are executed, ask for next signal
    '''

    def __init__(self, didx):
        '''

        :param didx: Int, the index of next signal
        '''
        self.type = "NextLoopEvent"
        self.didx = didx
